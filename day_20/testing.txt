[4, 2, 5, 6, 7, 2, 8, 9, 10, 11]

Move the 2s

Sequential OK?

[4, 5, 6, 2, 7, 2, 8, 9, 10, 11]
[4, 5, 6, 2, 7, 8, 9, 2, 10, 11]

What about crossing?

[5, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14]
indices = [0, 3]

Move the first
[1, 2, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
Breaks since index has changed!

Need to move in sync, or detect crossing? Corner-case is that you can even cross in sync. Can assume that no two duplicates are next to each other?

=== 1 ===
Move the first one step
[1, 5, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14]
Move the second one step
[1, 5, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14]
(1, 4)

=== 2 ===
Move the first one step
[1, 2, 5, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14]
Move the second one step
[1, 2, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

=== 3 ===
Move the first one step
[1, 2, 3, 5, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
Move the second one step
[1, 2, 3, 5, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14]

=== 4 ===
Move the first one step
[1, 2, 3, 4, 5, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14]
Move the second one step
[1, 2, 3, 4, 5, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14]

=== 5 ===
Move the first one step
[1, 2, 3, 4, 6, 5, 7, 5, 8, 9, 10, 11, 12, 13, 14]
Move the second one step
[1, 2, 3, 4, 6, 5, 7, 8, 5, 9, 10, 11, 12, 13, 14]

=================================================
Move the 4s:
[1, 2, 4, 3, 5, 4, 6, 7, 8]
indices = [2, 5]

== 1 ==
Move the first one step
[1, 2, 3, 4, 5, 4, 6, 7, 8]
Move the second one step
[1, 2, 3, 4, 5, 6, 4, 7, 8]

== 2 ==
Move the first one step
[1, 2, 3, 5, 4, 6, 4, 7, 8]

Move the second one step
[1, 2, 3, 5, 4, 6, 7, 4, 8]

== 3 ==
Move the first one step
[1, 2, 3, 5, 6, 4, 7, 4, 8]
Move the second one step
[4, 1, 2, 3, 5, 6, 4, 7, 8]

== 4 ==
Move the "first" one step
[4, 1, 2, 3, 5, 6, 7, 4, 8]
Move the "second" one step
[1, 4, 2, 3, 5, 6, 7, 4, 8]

===================================
Move the -3s
[1, 1, 1, 1, 1, -3, 1, 1, -3]


==============
Assume that you shouldn't move all occurences at one. Rather, keep track of all shifts.

So [3, 5, 8, 4, 3]. Initial order: 

1. The 3 at 0
2. The 5 at 1
3. The 8 at 2
4. The 4 at 3
5. The 3 at 4
Plan for indices: [0, 1, 2, 3, 4]

=== Moving 3 at 0 ===
[5, 8, 4, 3, 3]
Inserted at 3.
Remaining plan before insert: [1, 2, 3, 4]
Plan after insert: [0, 1, 2, 4]
1. 5 at 0
2. 8 at 1
3. 4 at 2
4. 3 at 4
So everything up to and including insertion index gets shifted -1 when moving something forwards.

=== Moving 5 at 0 ===
[8, 5, 4, 3, 3],
Inserted at 1.
Remaining plan before insert: [1, 2, 4]
Plan after insert: [0, 2, 4]

=== Moving 8 at 0 ===
[8, 5, 4, 3, 3]
Inserted at 0.
Remaining plan before insert: [2, 4]
Plan after insert: [2, 4]

=== Moving 4 at 2 ===
[8, 5, 4, 3, 3]
Inserted at 2.
Remaining plan before insert: [4]
Plan after insert: [4]

=== Moving 3 at 4 ===
[8, 5, 4, 3, 3]
Done.


Backwards?

[3, 1, -2, 2, 4]
Plan [0, 1, 2, 3, 4]

== Moving 3 at 0 ==
[1, -2, 2, 3, 4]
New idx 3.
Plan [0, 1, 2, 4]

== Moving 1 at 0 ==
[-2, 1, 2, 3, 4]
New idx 1
Plan [0, 2, 4]

== Moving -2 at 0 ==
[1, 2, -2, 3, 4]
New idx 2
Index queue [1, 4]

== Moving 2 at 1 ==
[1, -2, 3, 2, 4]
New idx 3
Index queue [4]

== Moving 4 at 4 ==
[4, 1, -2, 3, 2]
Done


======================
[3, 5, 8, 4, 2]

q = [0, 1, 2, 3, 4]

== First mix ==

Moving the 3 at 0
[5, 8, 4, 3, 2]
Insert index 3 
q = [0, 1, 2, 4] Anything in q such that start_idx <= idx <= insert_idx: -= 1
next_q = [3]

insert - start > 0, shift down anything  <= insert_idx
[1, 2, 3, 4] => [0, 1, 2, 4]

Moving the 5 which was at 0
[8, 5, 4, 3, 2]
Insert index 1
q = [0, 2, 4]
next_q = [3, 1]

insert - start == 1, shift down anything in between in q,
[1, 2, 4] => [0, 2, 4]
shift down anything in next_q before adding

Moving the 8 at 0
[8, 5, 4, 3, 2]
Insert index 0
q = [2, 4]
next_q = [3, 1, 0]

Moving the 4 which was at 2
[8, 5, 4, 3, 2]
Insert index 2
q = [4]
next_q = [3, 1, 0, 2]

Moving the 2 from pos 4
[8, 5, 2, 4, 3]
Insert index 2
q = []
next_q = [4, 1, 0, 3, 2]

insert < start, shift up anything start >= i >= insert
[3, 1, 0, 2] => [4, 1, 0, 3, 2] 


Initial arrangement:
811589153, 1623178306, -2434767459, 2434767459, -1623178306, 0, 3246356612

After 1 round of mixing:
0, -2434767459, 3246356612, -1623178306, 2434767459, 1623178306, 811589153

0, -2434767459, 3246356612, -1623178306, 2434767459, 1623178306, 811589153

After 2 rounds of mixing:
0, 2434767459, 1623178306, 3246356612, -2434767459, -1623178306, 811589153
0, 811589153, -2434767459, 3246356612, 1623178306, 2434767459, -1623178306


After 3 rounds of mixing:
0, 811589153, 2434767459, 3246356612, 1623178306, -1623178306, -2434767459



After 4 rounds of mixing:
0, 1623178306, -2434767459, 811589153, 2434767459, 3246356612, -1623178306

After 5 rounds of mixing:
0, 811589153, -1623178306, 1623178306, -2434767459, 3246356612, 2434767459

After 6 rounds of mixing:
0, 811589153, -1623178306, 3246356612, -2434767459, 1623178306, 2434767459

After 7 rounds of mixing:
0, -2434767459, 2434767459, 1623178306, -1623178306, 811589153, 3246356612

After 8 rounds of mixing:
0, 1623178306, 3246356612, 811589153, -2434767459, 2434767459, -1623178306

After 9 rounds of mixing:
0, 811589153, 1623178306, -2434767459, 3246356612, 2434767459, -1623178306

After 10 rounds of mixing:
0, -2434767459, 1623178306, 3246356612, -1623178306, 2434767459, 811589153
